// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: pb/svc/audio/audio.proto

package audio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AudioService_GenerateAudio_FullMethodName = "/AudioService/GenerateAudio"
	AudioService_MakingNewJob_FullMethodName  = "/AudioService/MakingNewJob"
	AudioService_CheckingJob_FullMethodName   = "/AudioService/CheckingJob"
	AudioService_SendingResult_FullMethodName = "/AudioService/SendingResult"
)

// AudioServiceClient is the client API for AudioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioServiceClient interface {
	GenerateAudio(ctx context.Context, in *Requirement, opts ...grpc.CallOption) (*Audio, error)
	MakingNewJob(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	CheckingJob(ctx context.Context, in *Checking, opts ...grpc.CallOption) (*Job, error)
	SendingResult(ctx context.Context, in *Audio, opts ...grpc.CallOption) (*Job, error)
}

type audioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioServiceClient(cc grpc.ClientConnInterface) AudioServiceClient {
	return &audioServiceClient{cc}
}

func (c *audioServiceClient) GenerateAudio(ctx context.Context, in *Requirement, opts ...grpc.CallOption) (*Audio, error) {
	out := new(Audio)
	err := c.cc.Invoke(ctx, AudioService_GenerateAudio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) MakingNewJob(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, AudioService_MakingNewJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) CheckingJob(ctx context.Context, in *Checking, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, AudioService_CheckingJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) SendingResult(ctx context.Context, in *Audio, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, AudioService_SendingResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioServiceServer is the server API for AudioService service.
// All implementations must embed UnimplementedAudioServiceServer
// for forward compatibility
type AudioServiceServer interface {
	GenerateAudio(context.Context, *Requirement) (*Audio, error)
	MakingNewJob(context.Context, *Request) (*Result, error)
	CheckingJob(context.Context, *Checking) (*Job, error)
	SendingResult(context.Context, *Audio) (*Job, error)
	mustEmbedUnimplementedAudioServiceServer()
}

// UnimplementedAudioServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAudioServiceServer struct {
}

func (UnimplementedAudioServiceServer) GenerateAudio(context.Context, *Requirement) (*Audio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAudio not implemented")
}
func (UnimplementedAudioServiceServer) MakingNewJob(context.Context, *Request) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakingNewJob not implemented")
}
func (UnimplementedAudioServiceServer) CheckingJob(context.Context, *Checking) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckingJob not implemented")
}
func (UnimplementedAudioServiceServer) SendingResult(context.Context, *Audio) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendingResult not implemented")
}
func (UnimplementedAudioServiceServer) mustEmbedUnimplementedAudioServiceServer() {}

// UnsafeAudioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioServiceServer will
// result in compilation errors.
type UnsafeAudioServiceServer interface {
	mustEmbedUnimplementedAudioServiceServer()
}

func RegisterAudioServiceServer(s grpc.ServiceRegistrar, srv AudioServiceServer) {
	s.RegisterService(&AudioService_ServiceDesc, srv)
}

func _AudioService_GenerateAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requirement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).GenerateAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioService_GenerateAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).GenerateAudio(ctx, req.(*Requirement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_MakingNewJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).MakingNewJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioService_MakingNewJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).MakingNewJob(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_CheckingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Checking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).CheckingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioService_CheckingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).CheckingJob(ctx, req.(*Checking))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_SendingResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Audio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).SendingResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioService_SendingResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).SendingResult(ctx, req.(*Audio))
	}
	return interceptor(ctx, in, info, handler)
}

// AudioService_ServiceDesc is the grpc.ServiceDesc for AudioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AudioService",
	HandlerType: (*AudioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAudio",
			Handler:    _AudioService_GenerateAudio_Handler,
		},
		{
			MethodName: "MakingNewJob",
			Handler:    _AudioService_MakingNewJob_Handler,
		},
		{
			MethodName: "CheckingJob",
			Handler:    _AudioService_CheckingJob_Handler,
		},
		{
			MethodName: "SendingResult",
			Handler:    _AudioService_SendingResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/svc/audio/audio.proto",
}
