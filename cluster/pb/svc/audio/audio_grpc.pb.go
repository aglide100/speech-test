// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: pb/svc/audio/audio.proto

package audio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AudioGenerationService_GenerateAudio_FullMethodName = "/AudioGenerationService/GenerateAudio"
	AudioGenerationService_MakingNewJob_FullMethodName  = "/AudioGenerationService/MakingNewJob"
	AudioGenerationService_CheckingJob_FullMethodName   = "/AudioGenerationService/CheckingJob"
	AudioGenerationService_SendingResult_FullMethodName = "/AudioGenerationService/SendingResult"
)

// AudioGenerationServiceClient is the client API for AudioGenerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioGenerationServiceClient interface {
	GenerateAudio(ctx context.Context, in *Requirement, opts ...grpc.CallOption) (*Audio, error)
	MakingNewJob(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Audio, error)
	CheckingJob(ctx context.Context, in *Checking, opts ...grpc.CallOption) (*Job, error)
	SendingResult(ctx context.Context, in *Audio, opts ...grpc.CallOption) (*Job, error)
}

type audioGenerationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioGenerationServiceClient(cc grpc.ClientConnInterface) AudioGenerationServiceClient {
	return &audioGenerationServiceClient{cc}
}

func (c *audioGenerationServiceClient) GenerateAudio(ctx context.Context, in *Requirement, opts ...grpc.CallOption) (*Audio, error) {
	out := new(Audio)
	err := c.cc.Invoke(ctx, AudioGenerationService_GenerateAudio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioGenerationServiceClient) MakingNewJob(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Audio, error) {
	out := new(Audio)
	err := c.cc.Invoke(ctx, AudioGenerationService_MakingNewJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioGenerationServiceClient) CheckingJob(ctx context.Context, in *Checking, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, AudioGenerationService_CheckingJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioGenerationServiceClient) SendingResult(ctx context.Context, in *Audio, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, AudioGenerationService_SendingResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioGenerationServiceServer is the server API for AudioGenerationService service.
// All implementations must embed UnimplementedAudioGenerationServiceServer
// for forward compatibility
type AudioGenerationServiceServer interface {
	GenerateAudio(context.Context, *Requirement) (*Audio, error)
	MakingNewJob(context.Context, *Request) (*Audio, error)
	CheckingJob(context.Context, *Checking) (*Job, error)
	SendingResult(context.Context, *Audio) (*Job, error)
	mustEmbedUnimplementedAudioGenerationServiceServer()
}

// UnimplementedAudioGenerationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAudioGenerationServiceServer struct {
}

func (UnimplementedAudioGenerationServiceServer) GenerateAudio(context.Context, *Requirement) (*Audio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAudio not implemented")
}
func (UnimplementedAudioGenerationServiceServer) MakingNewJob(context.Context, *Request) (*Audio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakingNewJob not implemented")
}
func (UnimplementedAudioGenerationServiceServer) CheckingJob(context.Context, *Checking) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckingJob not implemented")
}
func (UnimplementedAudioGenerationServiceServer) SendingResult(context.Context, *Audio) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendingResult not implemented")
}
func (UnimplementedAudioGenerationServiceServer) mustEmbedUnimplementedAudioGenerationServiceServer() {
}

// UnsafeAudioGenerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioGenerationServiceServer will
// result in compilation errors.
type UnsafeAudioGenerationServiceServer interface {
	mustEmbedUnimplementedAudioGenerationServiceServer()
}

func RegisterAudioGenerationServiceServer(s grpc.ServiceRegistrar, srv AudioGenerationServiceServer) {
	s.RegisterService(&AudioGenerationService_ServiceDesc, srv)
}

func _AudioGenerationService_GenerateAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requirement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioGenerationServiceServer).GenerateAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioGenerationService_GenerateAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioGenerationServiceServer).GenerateAudio(ctx, req.(*Requirement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioGenerationService_MakingNewJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioGenerationServiceServer).MakingNewJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioGenerationService_MakingNewJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioGenerationServiceServer).MakingNewJob(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioGenerationService_CheckingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Checking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioGenerationServiceServer).CheckingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioGenerationService_CheckingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioGenerationServiceServer).CheckingJob(ctx, req.(*Checking))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioGenerationService_SendingResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Audio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioGenerationServiceServer).SendingResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioGenerationService_SendingResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioGenerationServiceServer).SendingResult(ctx, req.(*Audio))
	}
	return interceptor(ctx, in, info, handler)
}

// AudioGenerationService_ServiceDesc is the grpc.ServiceDesc for AudioGenerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioGenerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AudioGenerationService",
	HandlerType: (*AudioGenerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAudio",
			Handler:    _AudioGenerationService_GenerateAudio_Handler,
		},
		{
			MethodName: "MakingNewJob",
			Handler:    _AudioGenerationService_MakingNewJob_Handler,
		},
		{
			MethodName: "CheckingJob",
			Handler:    _AudioGenerationService_CheckingJob_Handler,
		},
		{
			MethodName: "SendingResult",
			Handler:    _AudioGenerationService_SendingResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/svc/audio/audio.proto",
}
